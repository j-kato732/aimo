// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AimoClient is the client API for Aimo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AimoClient interface {
	GetAim(ctx context.Context, in *GetAimRequest, opts ...grpc.CallOption) (*GetAimResponse, error)
	PostAim(ctx context.Context, in *AimModel, opts ...grpc.CallOption) (*PostAimResponse, error)
}

type aimoClient struct {
	cc grpc.ClientConnInterface
}

func NewAimoClient(cc grpc.ClientConnInterface) AimoClient {
	return &aimoClient{cc}
}

func (c *aimoClient) GetAim(ctx context.Context, in *GetAimRequest, opts ...grpc.CallOption) (*GetAimResponse, error) {
	out := new(GetAimResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getAim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostAim(ctx context.Context, in *AimModel, opts ...grpc.CallOption) (*PostAimResponse, error) {
	out := new(PostAimResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postAim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AimoServer is the server API for Aimo service.
// All implementations must embed UnimplementedAimoServer
// for forward compatibility
type AimoServer interface {
	GetAim(context.Context, *GetAimRequest) (*GetAimResponse, error)
	PostAim(context.Context, *AimModel) (*PostAimResponse, error)
	mustEmbedUnimplementedAimoServer()
}

// UnimplementedAimoServer must be embedded to have forward compatible implementations.
type UnimplementedAimoServer struct {
}

func (UnimplementedAimoServer) GetAim(context.Context, *GetAimRequest) (*GetAimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAim not implemented")
}
func (UnimplementedAimoServer) PostAim(context.Context, *AimModel) (*PostAimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAim not implemented")
}
func (UnimplementedAimoServer) mustEmbedUnimplementedAimoServer() {}

// UnsafeAimoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AimoServer will
// result in compilation errors.
type UnsafeAimoServer interface {
	mustEmbedUnimplementedAimoServer()
}

func RegisterAimoServer(s grpc.ServiceRegistrar, srv AimoServer) {
	s.RegisterService(&Aimo_ServiceDesc, srv)
}

func _Aimo_GetAim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetAim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getAim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetAim(ctx, req.(*GetAimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostAim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AimModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostAim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postAim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostAim(ctx, req.(*AimModel))
	}
	return interceptor(ctx, in, info, handler)
}

// Aimo_ServiceDesc is the grpc.ServiceDesc for Aimo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aimo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aimo.aimo",
	HandlerType: (*AimoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAim",
			Handler:    _Aimo_GetAim_Handler,
		},
		{
			MethodName: "postAim",
			Handler:    _Aimo_PostAim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aimo.proto",
}
