// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AimoClient is the client API for Aimo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AimoClient interface {
	GetAim(ctx context.Context, in *GetAimRequest, opts ...grpc.CallOption) (*GetAimResponse, error)
	PostAim(ctx context.Context, in *AimModel, opts ...grpc.CallOption) (*PostAimResponse, error)
	PutAim(ctx context.Context, in *AimModel, opts ...grpc.CallOption) (*PutAimResponse, error)
	GetAchievementMeans(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*GetAchievementMeansResponse, error)
	PostAchievementMeans(ctx context.Context, in *PostAchievementMeansRequest, opts ...grpc.CallOption) (*PostAchievementMeansResponse, error)
	PutAchievementMeans(ctx context.Context, in *PutAchievementMeansRequest, opts ...grpc.CallOption) (*PutAchievementMeansResponses, error)
	GetAchievementMean(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*GetAchievementMeanResponse, error)
	PostAchievementMean(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*PostAchievementMeanResponse, error)
	PutAchievementMean(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetPersonalEva(ctx context.Context, in *PersonalEvaModel, opts ...grpc.CallOption) (*GetPersonalEvaResponse, error)
	PostPersonalEva(ctx context.Context, in *PersonalEvaModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutPersonalEva(ctx context.Context, in *PersonalEvaModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetEvaluationBefore(ctx context.Context, in *EvaluationBeforeModel, opts ...grpc.CallOption) (*GetEvaluationBeforeResponse, error)
	PostEvaluationBefore(ctx context.Context, in *EvaluationBeforeModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutEvaluationBefore(ctx context.Context, in *EvaluationBeforeModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetEvaluation(ctx context.Context, in *EvaluationModel, opts ...grpc.CallOption) (*GetEvaluationResponse, error)
	PostEvaluation(ctx context.Context, in *EvaluationModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutEvaluation(ctx context.Context, in *EvaluationModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetComprehensiveComment(ctx context.Context, in *ComprehensiveCommentModel, opts ...grpc.CallOption) (*GetComprehensiveCommentResponse, error)
	PostComprehensiveComment(ctx context.Context, in *ComprehensiveCommentModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutComprehensiveComment(ctx context.Context, in *ComprehensiveCommentModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetUser(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*GetUserResponse, error)
	PostUser(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutUser(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetPolicy(ctx context.Context, in *PolicyModel, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	PostPolicy(ctx context.Context, in *PolicyModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutPolicy(ctx context.Context, in *PolicyModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetDepartmentGoal(ctx context.Context, in *DepartmentGoalModel, opts ...grpc.CallOption) (*GetDepartmentGoalResponse, error)
	PostDepartmentGoal(ctx context.Context, in *DepartmentGoalModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutDepartmentGoal(ctx context.Context, in *DepartmentGoalModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetRole(ctx context.Context, in *RoleModel, opts ...grpc.CallOption) (*GetRoleResponse, error)
	PostRole(ctx context.Context, in *RoleModel, opts ...grpc.CallOption) (*PostDefaultResponse, error)
	PutRole(ctx context.Context, in *RoleModel, opts ...grpc.CallOption) (*PutDefaultResponse, error)
	GetPeriods(ctx context.Context, in *PeriodModel, opts ...grpc.CallOption) (*GetPeriodsResponse, error)
	GetDepartments(ctx context.Context, in *DepartmentModel, opts ...grpc.CallOption) (*GetDepartmentsResponse, error)
	GetJobs(ctx context.Context, in *JobModel, opts ...grpc.CallOption) (*GetJobsResponse, error)
}

type aimoClient struct {
	cc grpc.ClientConnInterface
}

func NewAimoClient(cc grpc.ClientConnInterface) AimoClient {
	return &aimoClient{cc}
}

func (c *aimoClient) GetAim(ctx context.Context, in *GetAimRequest, opts ...grpc.CallOption) (*GetAimResponse, error) {
	out := new(GetAimResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getAim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostAim(ctx context.Context, in *AimModel, opts ...grpc.CallOption) (*PostAimResponse, error) {
	out := new(PostAimResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postAim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutAim(ctx context.Context, in *AimModel, opts ...grpc.CallOption) (*PutAimResponse, error) {
	out := new(PutAimResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putAim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetAchievementMeans(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*GetAchievementMeansResponse, error) {
	out := new(GetAchievementMeansResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getAchievementMeans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostAchievementMeans(ctx context.Context, in *PostAchievementMeansRequest, opts ...grpc.CallOption) (*PostAchievementMeansResponse, error) {
	out := new(PostAchievementMeansResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postAchievementMeans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutAchievementMeans(ctx context.Context, in *PutAchievementMeansRequest, opts ...grpc.CallOption) (*PutAchievementMeansResponses, error) {
	out := new(PutAchievementMeansResponses)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putAchievementMeans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetAchievementMean(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*GetAchievementMeanResponse, error) {
	out := new(GetAchievementMeanResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getAchievementMean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostAchievementMean(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*PostAchievementMeanResponse, error) {
	out := new(PostAchievementMeanResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postAchievementMean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutAchievementMean(ctx context.Context, in *AchievementMeanModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putAchievementMean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetPersonalEva(ctx context.Context, in *PersonalEvaModel, opts ...grpc.CallOption) (*GetPersonalEvaResponse, error) {
	out := new(GetPersonalEvaResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getPersonalEva", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostPersonalEva(ctx context.Context, in *PersonalEvaModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postPersonalEva", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutPersonalEva(ctx context.Context, in *PersonalEvaModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putPersonalEva", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetEvaluationBefore(ctx context.Context, in *EvaluationBeforeModel, opts ...grpc.CallOption) (*GetEvaluationBeforeResponse, error) {
	out := new(GetEvaluationBeforeResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getEvaluationBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostEvaluationBefore(ctx context.Context, in *EvaluationBeforeModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postEvaluationBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutEvaluationBefore(ctx context.Context, in *EvaluationBeforeModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putEvaluationBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetEvaluation(ctx context.Context, in *EvaluationModel, opts ...grpc.CallOption) (*GetEvaluationResponse, error) {
	out := new(GetEvaluationResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostEvaluation(ctx context.Context, in *EvaluationModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutEvaluation(ctx context.Context, in *EvaluationModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetComprehensiveComment(ctx context.Context, in *ComprehensiveCommentModel, opts ...grpc.CallOption) (*GetComprehensiveCommentResponse, error) {
	out := new(GetComprehensiveCommentResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getComprehensiveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostComprehensiveComment(ctx context.Context, in *ComprehensiveCommentModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postComprehensiveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutComprehensiveComment(ctx context.Context, in *ComprehensiveCommentModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putComprehensiveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetUser(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostUser(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutUser(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetPolicy(ctx context.Context, in *PolicyModel, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostPolicy(ctx context.Context, in *PolicyModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutPolicy(ctx context.Context, in *PolicyModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetDepartmentGoal(ctx context.Context, in *DepartmentGoalModel, opts ...grpc.CallOption) (*GetDepartmentGoalResponse, error) {
	out := new(GetDepartmentGoalResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getDepartmentGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostDepartmentGoal(ctx context.Context, in *DepartmentGoalModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postDepartmentGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutDepartmentGoal(ctx context.Context, in *DepartmentGoalModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putDepartmentGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetRole(ctx context.Context, in *RoleModel, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/getRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PostRole(ctx context.Context, in *RoleModel, opts ...grpc.CallOption) (*PostDefaultResponse, error) {
	out := new(PostDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/postRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) PutRole(ctx context.Context, in *RoleModel, opts ...grpc.CallOption) (*PutDefaultResponse, error) {
	out := new(PutDefaultResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/putRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetPeriods(ctx context.Context, in *PeriodModel, opts ...grpc.CallOption) (*GetPeriodsResponse, error) {
	out := new(GetPeriodsResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/GetPeriods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetDepartments(ctx context.Context, in *DepartmentModel, opts ...grpc.CallOption) (*GetDepartmentsResponse, error) {
	out := new(GetDepartmentsResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/GetDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aimoClient) GetJobs(ctx context.Context, in *JobModel, opts ...grpc.CallOption) (*GetJobsResponse, error) {
	out := new(GetJobsResponse)
	err := c.cc.Invoke(ctx, "/aimo.aimo/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AimoServer is the server API for Aimo service.
// All implementations must embed UnimplementedAimoServer
// for forward compatibility
type AimoServer interface {
	GetAim(context.Context, *GetAimRequest) (*GetAimResponse, error)
	PostAim(context.Context, *AimModel) (*PostAimResponse, error)
	PutAim(context.Context, *AimModel) (*PutAimResponse, error)
	GetAchievementMeans(context.Context, *AchievementMeanModel) (*GetAchievementMeansResponse, error)
	PostAchievementMeans(context.Context, *PostAchievementMeansRequest) (*PostAchievementMeansResponse, error)
	PutAchievementMeans(context.Context, *PutAchievementMeansRequest) (*PutAchievementMeansResponses, error)
	GetAchievementMean(context.Context, *AchievementMeanModel) (*GetAchievementMeanResponse, error)
	PostAchievementMean(context.Context, *AchievementMeanModel) (*PostAchievementMeanResponse, error)
	PutAchievementMean(context.Context, *AchievementMeanModel) (*PutDefaultResponse, error)
	GetPersonalEva(context.Context, *PersonalEvaModel) (*GetPersonalEvaResponse, error)
	PostPersonalEva(context.Context, *PersonalEvaModel) (*PostDefaultResponse, error)
	PutPersonalEva(context.Context, *PersonalEvaModel) (*PutDefaultResponse, error)
	GetEvaluationBefore(context.Context, *EvaluationBeforeModel) (*GetEvaluationBeforeResponse, error)
	PostEvaluationBefore(context.Context, *EvaluationBeforeModel) (*PostDefaultResponse, error)
	PutEvaluationBefore(context.Context, *EvaluationBeforeModel) (*PutDefaultResponse, error)
	GetEvaluation(context.Context, *EvaluationModel) (*GetEvaluationResponse, error)
	PostEvaluation(context.Context, *EvaluationModel) (*PostDefaultResponse, error)
	PutEvaluation(context.Context, *EvaluationModel) (*PutDefaultResponse, error)
	GetComprehensiveComment(context.Context, *ComprehensiveCommentModel) (*GetComprehensiveCommentResponse, error)
	PostComprehensiveComment(context.Context, *ComprehensiveCommentModel) (*PostDefaultResponse, error)
	PutComprehensiveComment(context.Context, *ComprehensiveCommentModel) (*PutDefaultResponse, error)
	GetUser(context.Context, *UserModel) (*GetUserResponse, error)
	PostUser(context.Context, *UserModel) (*PostDefaultResponse, error)
	PutUser(context.Context, *UserModel) (*PutDefaultResponse, error)
	GetPolicy(context.Context, *PolicyModel) (*GetPolicyResponse, error)
	PostPolicy(context.Context, *PolicyModel) (*PostDefaultResponse, error)
	PutPolicy(context.Context, *PolicyModel) (*PutDefaultResponse, error)
	GetDepartmentGoal(context.Context, *DepartmentGoalModel) (*GetDepartmentGoalResponse, error)
	PostDepartmentGoal(context.Context, *DepartmentGoalModel) (*PostDefaultResponse, error)
	PutDepartmentGoal(context.Context, *DepartmentGoalModel) (*PutDefaultResponse, error)
	GetRole(context.Context, *RoleModel) (*GetRoleResponse, error)
	PostRole(context.Context, *RoleModel) (*PostDefaultResponse, error)
	PutRole(context.Context, *RoleModel) (*PutDefaultResponse, error)
	GetPeriods(context.Context, *PeriodModel) (*GetPeriodsResponse, error)
	GetDepartments(context.Context, *DepartmentModel) (*GetDepartmentsResponse, error)
	GetJobs(context.Context, *JobModel) (*GetJobsResponse, error)
	mustEmbedUnimplementedAimoServer()
}

// UnimplementedAimoServer must be embedded to have forward compatible implementations.
type UnimplementedAimoServer struct {
}

func (UnimplementedAimoServer) GetAim(context.Context, *GetAimRequest) (*GetAimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAim not implemented")
}
func (UnimplementedAimoServer) PostAim(context.Context, *AimModel) (*PostAimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAim not implemented")
}
func (UnimplementedAimoServer) PutAim(context.Context, *AimModel) (*PutAimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAim not implemented")
}
func (UnimplementedAimoServer) GetAchievementMeans(context.Context, *AchievementMeanModel) (*GetAchievementMeansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementMeans not implemented")
}
func (UnimplementedAimoServer) PostAchievementMeans(context.Context, *PostAchievementMeansRequest) (*PostAchievementMeansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAchievementMeans not implemented")
}
func (UnimplementedAimoServer) PutAchievementMeans(context.Context, *PutAchievementMeansRequest) (*PutAchievementMeansResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAchievementMeans not implemented")
}
func (UnimplementedAimoServer) GetAchievementMean(context.Context, *AchievementMeanModel) (*GetAchievementMeanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementMean not implemented")
}
func (UnimplementedAimoServer) PostAchievementMean(context.Context, *AchievementMeanModel) (*PostAchievementMeanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAchievementMean not implemented")
}
func (UnimplementedAimoServer) PutAchievementMean(context.Context, *AchievementMeanModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAchievementMean not implemented")
}
func (UnimplementedAimoServer) GetPersonalEva(context.Context, *PersonalEvaModel) (*GetPersonalEvaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalEva not implemented")
}
func (UnimplementedAimoServer) PostPersonalEva(context.Context, *PersonalEvaModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPersonalEva not implemented")
}
func (UnimplementedAimoServer) PutPersonalEva(context.Context, *PersonalEvaModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPersonalEva not implemented")
}
func (UnimplementedAimoServer) GetEvaluationBefore(context.Context, *EvaluationBeforeModel) (*GetEvaluationBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationBefore not implemented")
}
func (UnimplementedAimoServer) PostEvaluationBefore(context.Context, *EvaluationBeforeModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEvaluationBefore not implemented")
}
func (UnimplementedAimoServer) PutEvaluationBefore(context.Context, *EvaluationBeforeModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEvaluationBefore not implemented")
}
func (UnimplementedAimoServer) GetEvaluation(context.Context, *EvaluationModel) (*GetEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (UnimplementedAimoServer) PostEvaluation(context.Context, *EvaluationModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEvaluation not implemented")
}
func (UnimplementedAimoServer) PutEvaluation(context.Context, *EvaluationModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEvaluation not implemented")
}
func (UnimplementedAimoServer) GetComprehensiveComment(context.Context, *ComprehensiveCommentModel) (*GetComprehensiveCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComprehensiveComment not implemented")
}
func (UnimplementedAimoServer) PostComprehensiveComment(context.Context, *ComprehensiveCommentModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComprehensiveComment not implemented")
}
func (UnimplementedAimoServer) PutComprehensiveComment(context.Context, *ComprehensiveCommentModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutComprehensiveComment not implemented")
}
func (UnimplementedAimoServer) GetUser(context.Context, *UserModel) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAimoServer) PostUser(context.Context, *UserModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUser not implemented")
}
func (UnimplementedAimoServer) PutUser(context.Context, *UserModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (UnimplementedAimoServer) GetPolicy(context.Context, *PolicyModel) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedAimoServer) PostPolicy(context.Context, *PolicyModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPolicy not implemented")
}
func (UnimplementedAimoServer) PutPolicy(context.Context, *PolicyModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPolicy not implemented")
}
func (UnimplementedAimoServer) GetDepartmentGoal(context.Context, *DepartmentGoalModel) (*GetDepartmentGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentGoal not implemented")
}
func (UnimplementedAimoServer) PostDepartmentGoal(context.Context, *DepartmentGoalModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDepartmentGoal not implemented")
}
func (UnimplementedAimoServer) PutDepartmentGoal(context.Context, *DepartmentGoalModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDepartmentGoal not implemented")
}
func (UnimplementedAimoServer) GetRole(context.Context, *RoleModel) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAimoServer) PostRole(context.Context, *RoleModel) (*PostDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRole not implemented")
}
func (UnimplementedAimoServer) PutRole(context.Context, *RoleModel) (*PutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRole not implemented")
}
func (UnimplementedAimoServer) GetPeriods(context.Context, *PeriodModel) (*GetPeriodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriods not implemented")
}
func (UnimplementedAimoServer) GetDepartments(context.Context, *DepartmentModel) (*GetDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedAimoServer) GetJobs(context.Context, *JobModel) (*GetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedAimoServer) mustEmbedUnimplementedAimoServer() {}

// UnsafeAimoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AimoServer will
// result in compilation errors.
type UnsafeAimoServer interface {
	mustEmbedUnimplementedAimoServer()
}

func RegisterAimoServer(s grpc.ServiceRegistrar, srv AimoServer) {
	s.RegisterService(&Aimo_ServiceDesc, srv)
}

func _Aimo_GetAim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetAim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getAim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetAim(ctx, req.(*GetAimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostAim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AimModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostAim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postAim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostAim(ctx, req.(*AimModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutAim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AimModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutAim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putAim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutAim(ctx, req.(*AimModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetAchievementMeans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchievementMeanModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetAchievementMeans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getAchievementMeans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetAchievementMeans(ctx, req.(*AchievementMeanModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostAchievementMeans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAchievementMeansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostAchievementMeans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postAchievementMeans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostAchievementMeans(ctx, req.(*PostAchievementMeansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutAchievementMeans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAchievementMeansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutAchievementMeans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putAchievementMeans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutAchievementMeans(ctx, req.(*PutAchievementMeansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetAchievementMean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchievementMeanModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetAchievementMean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getAchievementMean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetAchievementMean(ctx, req.(*AchievementMeanModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostAchievementMean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchievementMeanModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostAchievementMean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postAchievementMean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostAchievementMean(ctx, req.(*AchievementMeanModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutAchievementMean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchievementMeanModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutAchievementMean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putAchievementMean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutAchievementMean(ctx, req.(*AchievementMeanModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetPersonalEva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalEvaModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetPersonalEva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getPersonalEva",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetPersonalEva(ctx, req.(*PersonalEvaModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostPersonalEva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalEvaModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostPersonalEva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postPersonalEva",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostPersonalEva(ctx, req.(*PersonalEvaModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutPersonalEva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalEvaModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutPersonalEva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putPersonalEva",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutPersonalEva(ctx, req.(*PersonalEvaModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetEvaluationBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationBeforeModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetEvaluationBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getEvaluationBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetEvaluationBefore(ctx, req.(*EvaluationBeforeModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostEvaluationBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationBeforeModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostEvaluationBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postEvaluationBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostEvaluationBefore(ctx, req.(*EvaluationBeforeModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutEvaluationBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationBeforeModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutEvaluationBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putEvaluationBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutEvaluationBefore(ctx, req.(*EvaluationBeforeModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetEvaluation(ctx, req.(*EvaluationModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostEvaluation(ctx, req.(*EvaluationModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutEvaluation(ctx, req.(*EvaluationModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetComprehensiveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComprehensiveCommentModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetComprehensiveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getComprehensiveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetComprehensiveComment(ctx, req.(*ComprehensiveCommentModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostComprehensiveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComprehensiveCommentModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostComprehensiveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postComprehensiveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostComprehensiveComment(ctx, req.(*ComprehensiveCommentModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutComprehensiveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComprehensiveCommentModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutComprehensiveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putComprehensiveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutComprehensiveComment(ctx, req.(*ComprehensiveCommentModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetUser(ctx, req.(*UserModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostUser(ctx, req.(*UserModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutUser(ctx, req.(*UserModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetPolicy(ctx, req.(*PolicyModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostPolicy(ctx, req.(*PolicyModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutPolicy(ctx, req.(*PolicyModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetDepartmentGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentGoalModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetDepartmentGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getDepartmentGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetDepartmentGoal(ctx, req.(*DepartmentGoalModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostDepartmentGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentGoalModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostDepartmentGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postDepartmentGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostDepartmentGoal(ctx, req.(*DepartmentGoalModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutDepartmentGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentGoalModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutDepartmentGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putDepartmentGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutDepartmentGoal(ctx, req.(*DepartmentGoalModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/getRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetRole(ctx, req.(*RoleModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PostRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PostRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/postRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PostRole(ctx, req.(*RoleModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_PutRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).PutRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/putRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).PutRole(ctx, req.(*RoleModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetPeriods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetPeriods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/GetPeriods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetPeriods(ctx, req.(*PeriodModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/GetDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetDepartments(ctx, req.(*DepartmentModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aimo_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AimoServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aimo.aimo/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AimoServer).GetJobs(ctx, req.(*JobModel))
	}
	return interceptor(ctx, in, info, handler)
}

// Aimo_ServiceDesc is the grpc.ServiceDesc for Aimo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aimo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aimo.aimo",
	HandlerType: (*AimoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAim",
			Handler:    _Aimo_GetAim_Handler,
		},
		{
			MethodName: "postAim",
			Handler:    _Aimo_PostAim_Handler,
		},
		{
			MethodName: "putAim",
			Handler:    _Aimo_PutAim_Handler,
		},
		{
			MethodName: "getAchievementMeans",
			Handler:    _Aimo_GetAchievementMeans_Handler,
		},
		{
			MethodName: "postAchievementMeans",
			Handler:    _Aimo_PostAchievementMeans_Handler,
		},
		{
			MethodName: "putAchievementMeans",
			Handler:    _Aimo_PutAchievementMeans_Handler,
		},
		{
			MethodName: "getAchievementMean",
			Handler:    _Aimo_GetAchievementMean_Handler,
		},
		{
			MethodName: "postAchievementMean",
			Handler:    _Aimo_PostAchievementMean_Handler,
		},
		{
			MethodName: "putAchievementMean",
			Handler:    _Aimo_PutAchievementMean_Handler,
		},
		{
			MethodName: "getPersonalEva",
			Handler:    _Aimo_GetPersonalEva_Handler,
		},
		{
			MethodName: "postPersonalEva",
			Handler:    _Aimo_PostPersonalEva_Handler,
		},
		{
			MethodName: "putPersonalEva",
			Handler:    _Aimo_PutPersonalEva_Handler,
		},
		{
			MethodName: "getEvaluationBefore",
			Handler:    _Aimo_GetEvaluationBefore_Handler,
		},
		{
			MethodName: "postEvaluationBefore",
			Handler:    _Aimo_PostEvaluationBefore_Handler,
		},
		{
			MethodName: "putEvaluationBefore",
			Handler:    _Aimo_PutEvaluationBefore_Handler,
		},
		{
			MethodName: "getEvaluation",
			Handler:    _Aimo_GetEvaluation_Handler,
		},
		{
			MethodName: "postEvaluation",
			Handler:    _Aimo_PostEvaluation_Handler,
		},
		{
			MethodName: "putEvaluation",
			Handler:    _Aimo_PutEvaluation_Handler,
		},
		{
			MethodName: "getComprehensiveComment",
			Handler:    _Aimo_GetComprehensiveComment_Handler,
		},
		{
			MethodName: "postComprehensiveComment",
			Handler:    _Aimo_PostComprehensiveComment_Handler,
		},
		{
			MethodName: "putComprehensiveComment",
			Handler:    _Aimo_PutComprehensiveComment_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Aimo_GetUser_Handler,
		},
		{
			MethodName: "postUser",
			Handler:    _Aimo_PostUser_Handler,
		},
		{
			MethodName: "putUser",
			Handler:    _Aimo_PutUser_Handler,
		},
		{
			MethodName: "getPolicy",
			Handler:    _Aimo_GetPolicy_Handler,
		},
		{
			MethodName: "postPolicy",
			Handler:    _Aimo_PostPolicy_Handler,
		},
		{
			MethodName: "putPolicy",
			Handler:    _Aimo_PutPolicy_Handler,
		},
		{
			MethodName: "getDepartmentGoal",
			Handler:    _Aimo_GetDepartmentGoal_Handler,
		},
		{
			MethodName: "postDepartmentGoal",
			Handler:    _Aimo_PostDepartmentGoal_Handler,
		},
		{
			MethodName: "putDepartmentGoal",
			Handler:    _Aimo_PutDepartmentGoal_Handler,
		},
		{
			MethodName: "getRole",
			Handler:    _Aimo_GetRole_Handler,
		},
		{
			MethodName: "postRole",
			Handler:    _Aimo_PostRole_Handler,
		},
		{
			MethodName: "putRole",
			Handler:    _Aimo_PutRole_Handler,
		},
		{
			MethodName: "GetPeriods",
			Handler:    _Aimo_GetPeriods_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _Aimo_GetDepartments_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _Aimo_GetJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aimo.proto",
}
