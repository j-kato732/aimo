openapi: '3.0.2'
info:
  title: aimo_openapi
  version: '1.0'
servers:
  - url: "localhost:8000" 
paths:
  /period:
    get:
      tags: 
      - "period"
      summary: "get annual period"
      responses:
        '200':
          description: OK          
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      periods:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                            period:
                              type: string
                        example:
                          - id: 1
                            period: 202005 
                          - id: 2
                            period: 202011
                          - id: 3
                            period: 202105 
  /department:
    get:
      tags:
      - "department"
      summary: "get department list"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      departments:
                        type: array
                        items:
                          type: object
                          properties:
                            departmentId:
                              type: integer
                            department:
                              type: string
                        example:
                          - id: 1
                            department: ソリューション本部
                          - id: 2
                            department: ソリューション本部 開発1部
                          - id: 3
                            department: ソリューション本部 開発2部
                          - id: 4
                            department: 札幌開発センター
                          - id: 5
                            department: エイジア開発事業本部
                          - id: 6
                            department: 営業本部
                          - id: 7
                            department: 事業推進本部
                          - id: 8
                            department: 管理本部
                          - id: 9
                            department: 情報システム部
                          - id: 10
                            department: モバイルライフジャパン
  /job:
    get:
      tags:
      - "job"
      summary: "get job list"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      jobs:
                        type: array
                        items:
                          type: object
                          properties:
                            jobId:
                              type: integer
                            job:
                              type: string
                        example:
                          - id: 1
                            job: シニアSP
                          - id: 2
                            job: スペシャリスト
                          - id: 3
                            job: マネージャー
                          - id: 4
                            job: リーダー
                          - id: 5
                            job: サブリーダー
                          - id: 6
                            job: ジュニア


  /aimoInfo/{execDate}:
    get:
      tags:
      - "aimoInfo"
      summary: "get aimo inform"
      parameters:
      - name: execDate
        in: path
        description: 取得対象日付
        required: true
        schema:
          $ref: '#/components/schemas/execDate'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAimoInfoResponse'
  /user:
    get:
      tags:
      - "user"
      summary: "get user information"
      parameters:
      - name: authId
        in: query
        description: ユーザID
        required: true
        schema:
          $ref: '#/components/schemas/getUserInfoRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/getUserInfoResponse'
    post:
      tags:
      - "user"
      summary: "create user information"
      requestBody:
        $ref: '#/components/requestBodies/userBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postUserInfoResponse'
    put:
      tags:
      - "user"
      summary: "update user information"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putUserInfoResponse'
  /policy:
    get:
      tags:
      - "policy"
      summary: "get manage policy"
      parameters:
      - name: period
        in: query
        description: 期間
        required: true
        schema:
          $ref: '#/components/schemas/period'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPolicyResponse'
    post:
      tags:
      - "policy"
      summary: "create manage policy"
      requestBody:
        $ref: '#/components/requestBodies/policyBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postPolicyResponse'
    put:
      tags:
      - "policy"
      summary: "upcate manage policy"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /departmentGoal:
    get:
      tags:
      - "departmentGoal"
      summary: "get depart goal"
      parameters:
      - name: period
        in: query
        description: 期間
        required: true
        schema:
          $ref: '#/components/schemas/period'
      - name: departmentId
        in: query
        description: 部署
        required: true
        schema:
          $ref: '#/components/schemas/departmentId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDepartmentGoalResponse'
    post:
      tags: 
      - "departmentGoal"
      summary: "create department goal"
      requestBody:
        $ref: '#/components/requestBodies/departmentGoalBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/postDepartmentGoalResponse'
    put:
      tags:
      - "departmentGoal"
      summary: "update department goal"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/departmentGoal'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /role:
    get:
      tags:
      - "role"
      summary: "get parsonal role"
      parameters:
        - name: period
          description: 期間
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/period'
        - name: departmentId
          description: 部署ID
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/departmentId'
        - name: jobId
          description: 職位ID
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/jobId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      role:
                        $ref: '#/components/schemas/role'
    post:
      tags: 
      - "role"
      summary: "post parsonal role"
      requestBody:
        $ref: '#/components/requestBodies/roleBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/roleId'
    put:
      tags:
      - "role"
      summary: "put parsonal role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /aim:
    get:
      tags:
      - "aim"
      summary: "目標取得api"
      parameters:
        - name: period
          description: 期間
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/period'
        - name: userId
          description: ユーザID
          in: query
          required: true
          schema:
            type: integer
            example: 1
            
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      aim:
                        type: array
                        items:
                          $ref: '#/components/schemas/aim'
    post:
      tags:
        - "aim"
      summary: "目標設定を作成する"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aimModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/aimId'
    put:
      tags:
        - "aim"
      summary: "目標の更新"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aim'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /achievementMeans:
    get:
      tags:
      - "achievementMeans"
      summary: "具体的達成手段リスト取得API"
      parameters:
        - name: period
          description: 期間
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/period'
        - name: userId
          description: ユーザID
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: aimNumber
          description: 目標番号
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      achievementMeans:
                        type: array
                        items:
                          $ref: '#/components/schemas/achievementMean'
    post:
      tags:
        - "achievementMeans"
      summary: 具体的達成手段作成
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievementMeans:
                  type: array
                  items:
                    $ref: '#/components/schemas/achievementMeanModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      type: object
                      properties:
                        response:
                          $ref: '#/components/schemas/defaultResponse'
                        result:
                          $ref: '#/components/schemas/achievementMeanId'
    put:
      tags:
        - "achievementMeans"
      summary: 具体的達成手段更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievementMeans:
                  type: array
                  items:
                    $ref: '#/components/schemas/achievementMean'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      type: object
                      properties:
                        response:
                          $ref: '#/components/schemas/defaultResponse'
  /achievementMean:
    get:
      tags:
      - "achievementMean"
      summary: "具体的達成手段取得API"
      parameters:
        - name: period
          description: 期間
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/period'
        - name: userId
          description: ユーザID
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: aimNumber
          description: 目標番号
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: achievementMeanNumber
          description: 具体的達成手段番号
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      achievementMean:
                          $ref: '#/components/schemas/achievementMean'
    post:
      tags:
        - "achievementMean"
      summary: 具体的達成手段作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/achievementMeanModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: object
                    properties:
                      response:
                        $ref: '#/components/schemas/defaultResponse'
                      result:
                        $ref: '#/components/schemas/achievementMeanId'
    put:
      tags:
        - "achievementMean"
      summary: 具体的達成手段更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/achievementMean'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'




  /personalEva:
    get:
      tags:
        - "personalEva"
      summary: 本人評価取得
      parameters:
        - name: aimId
          description: 目標ID
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      personalEva:
                        $ref: '#/components/schemas/personalEva'
    post:
      tags:
        - "personalEva"
      summary: 本人評価作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personalEvaModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/personalEvaId'
    put:
      tags:
        - "personalEva"
      summary: 本人評価更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personalEva'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /evaluationBefore:
    get:
      tags:
        - "evaluationBefore"
      summary: 評価前コメント取得
      parameters:
        - name: aimId
          description: 目標ID
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      commentBefore:
                        type: array
                        items:
                          $ref: '#/components/schemas/commentBefore'
    post:
      tags:
        - "evaluationBefore"
      summary: 評価前コメント作成
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/commentBeforeAimId'
              - $ref: '#/components/schemas/commentBeforeModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/commentBeforeId'
    put:
      tags:
        - "evaluationBefore"
      summary: 評価前コメント更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commentBefore'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /evaluation:
    get:
      tags:
        - "evaluation"
      summary: 目標評価取得
      parameters:
        - name: aimId
          description: 目標ID
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: evaluatorNumber
          description: 評価番号（1次か2次）
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
               type: object
               properties:
                respomse:
                  $ref: '#/components/schemas/defaultResponse'
                result:
                  type: object
                  properties:
                    evaluation:
                      $ref: '#/components/schemas/evaluation'
    post:
      tags:
        - "evaluation"
      summary: 目標評価作成
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/evaluationAimId'
              - $ref: '#/components/schemas/evaluationModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/evaluationId'
    put:
      tags:
        - "evaluation"
      summary: 目標評価更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/evaluation'
      responses:
        "200":
          $ref: '#/components/responses/OK'
  /comprehensiveComment:
    get:
      tags:
        - "comprehensiveComment"
      summary: "総合コメント取得"
      parameters:
        - name: userId
          description: ユーザID 
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: period
          description: 期間
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/period'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    type: object
                    properties:
                      comprehensiveComment:
                        $ref: '#/components/schemas/comprehensiveComment'
    post:
      tags:
        - "comprehensiveComment"
      summary: 総合コメント作成
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/comprehensiveCommentUserId'
              - $ref: '#/components/schemas/comprehensiveCommentPeriod'
              - $ref: '#/components/schemas/comprehensiveCommentModel'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/defaultResponse'
                  result:
                    $ref: '#/components/schemas/comprehensiveCommentId'
    put:
      tags:
        - "comprehensiveComment"
      summary: 総合コメント更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comprehensiveComment'
      responses:
        "200":
          $ref: '#/components/responses/OK'





components:
  schemas:
    execDate:
      description: 実行日付
      type: string
      minLength: 8
      maxLength: 8
      example: 20210501
    period:
      description: 期間
      type: string
      minLength: 6
      maxLength: 6
      example: 202105
    departmentId:
      description: 部署ID
      type: integer
      maxLength: 3
      example: 2
    jobId:
      description: 職位ID
      type: integer
      maxLength: 3
      example: 6
    getAimoInfoResponse:
      description: 経営方針取得レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
        result:
          type: object
          properties:
            aimoInfo:
              $ref: '#/components/schemas/aimoInfo'
    getUserInfoRequest:
      description: ユーザ情報取得のリクエスト
      type: object
      properties:
        authId:
          type: integer
          example: 1
        period:
          type: string
          example: 202105
    getUserInfoResponse:
      description: ユーザ情報取得レスポンス
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
    postUserInfoResponse:
      description: ユーザ情報作成レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
        result:
          type: object
          properties:
            userId:
              type: integer
              example: 1
    putUserInfoResponse:
      description: ユーザ情報更新レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
    getPolicyResponse:
      description: 経営方針取得レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
        result:
          type: object
          properties:
            policy:
              $ref: '#/components/schemas/policy'
    postPolicyRequestBody:
      description: 経営方針作成リクエスト
      $ref: '#/components/schemas/policyModel'
    postPolicyResponse:
      description: 経営方針レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
        result:
          $ref: '#/components/schemas/policyId'
    getDepartmentGoalResponse:
      description: 部署目標取得レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
        result:
          type: object
          properties:
            departmentGoal:
              $ref: '#/components/schemas/departmentGoal'
    postDepartmentGoalResponse:
      description: 部署目標作成レスポンス
      type: object
      properties:
        response:
          $ref: '#/components/schemas/defaultResponse'
        resutl:
          $ref: '#/components/schemas/departmentGoalId'

    defaultResponse:
      description: 基本レスポンス
      type: object
      properties:
        status:
          type: string
          example: 1
        message:
          type: string
    aimoInfoId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    aimoInfoModel:
      type: object
      properties:
        aimoInfoContent:
          type: string
          example: 目標入力期間になりました
    aimoInfo:
      description: お知らせ
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/aimoInfoId'
          - $ref: '#/components/schemas/aimoInfoModel'
    userId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    userModel:
      description: ユーザ情報
      type: object
      properties:
        authId:
          type: integer
          example: 1
        period:
          type: string
          example: 202105
        lastName:
          type: string
          maxLength: 10
          example: 加藤
        firstName:
          type: string
          maxLength: 10
          example: 仁 
        departmentId:
          type: integer 
          maxLength: 3
          example: 2
        jobId:
          type: integer
          maxLength: 3
          example: 6
        enrollmentFlg:
          type: boolean
          example: true
        adminFlg:
          type: boolean
          example: false
    user:
      description: ユーザ
      allOf:
        - $ref: '#/components/schemas/userId'
        - $ref: '#/components/schemas/userModel'
    policyId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    policyModel:
      description: 経営方針
      type: object
      properties:
        period:
          $ref: '#/components/schemas/period'
        midTermPolicy:
          description: 中期経営方針
          type: string
          maxLength: 500
          example: "No.1 ICTソリューションプロバイダーを目指し、これからのソリューション業界のリーディングカンパニーになる¥n【2022年度末目標：売上高５０億円／営業利益５億"
        periodPolicy:
          description: 期別経営方針
          type: string
          maxLength: 500
          example: "全社増収収益（収益力向上）"
    policy:
      description: 経営方針
      allOf:
        - $ref: '#/components/schemas/policyId'
        - $ref: '#/components/schemas/policyModel'
    departmentGoalId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    departmentGoalModel:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/period'
        departmentId:
          $ref: '#/components/schemas/departmentId'
        departmentGoal:
          description: 部署目標
          type: string
          maxLength: 500
          example: 収益目標達成への貢献¥n事業強化への取り組み
    departmentGoal:
      allOf:
        - $ref: '#/components/schemas/departmentGoalId'
        - $ref: '#/components/schemas/departmentGoalModel'
    roleId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    roleModel:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/period'
        departmentId:
          $ref: '#/components/schemas/departmentId'
        jobId:
          $ref: '#/components/schemas/jobId'
        role:
          description: 本人の役割
          type: string
          maxLength: 500
          example: 担当タスクにおける課題のキャッチアップと適切なエスカレーション¥nキャリアアップにつながる自己啓発
    role:
      allOf:
        - $ref: '#/components/schemas/roleId'
        - $ref: '#/components/schemas/roleModel'
    aimId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    aimModel:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/period'
        userId:
          description: ユーザID
          type: integer
          example: 1
        aimItem:
          description: 目標項目
          type: string
          maxLength: 500
          example: プロジェクト全体像の把握
        achievementLevel:
          description: 達成水準
          type: string
          maxLength: 500
          example: 独り立ちする
        achievementWeight:
          description: ウェイト(パーセント)
          type: integer
          maxLength: 3
          example: 20
        achievementDifficultyBefore:
          description: 評価前個人的難易度'(1~5)
          type: integer
          enum: [1,2,3,4,5]
          example: 5
        # personalEvaluation:
        #   description: 本人評価
        #   type: string
        #   maxLength: 500
        #   example: いい感じやった
        # achievementRate:
        #   description: 達成率(パーセント)
        #   type: integer
        #   maxLength: 3
        #   example: 75
        # achievementDifficultyAfter:
        #   description: 評価時個人的難易度
        #   type: integer
        #   enum: [1,2,3,4,5]
        #   example: 4
        aimNumber:
          description: 達成手段番号
          type: integer
          enum: [1,2,3,4,5]
          example: 1
    aim:
      allOf:
        - $ref: '#/components/schemas/aimId'
        - $ref: '#/components/schemas/aimModel'
    achievementMeanId:
      type: object
      properties:
        id:
          type: integer
          example: 1
        
    achievementMeanModel:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/period'
        userId:
          description: ユーザID
          type: integer
          example: 
        aimNumber:
          description: 目標番号
          type: integer
          enum: [1,2,3,4,5]
          example: 1
        achievementMeanNumber:
          description: 手段番号
          type: integer
          enum: [1,2,3,4,5,6]
          example: 1
        achievementMean:
          description: 具体的達成手段
          type: string
          maxLength: 50
          example: 質問するぜ
        firstMonth:
          description: 1月目
          type: boolean
          example: true
        secondMonth:
          type: boolean
          example: true
        thirdMonth:
          type: boolean
          example: true
        fourthMonth:
          type: boolean
          example: true
        fifthMonth:
          type: boolean
          example: true
        sixthMonth:
          type: boolean
          example: true
    achievementMean:
      allOf:
        - $ref: '#/components/schemas/achievementMeanId'
        - $ref: '#/components/schemas/achievementMeanModel'
    personalEvaId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    personalEvaModel:
      type: object
      properties:
        aimId:
          description: 目標Id
          type: integer
          example: 1
        personalEvaluation:
          description: 本人評価
          type: string
          maxLength: 500
          example: いい感じでした
        achievementRate:
          description: 達成率(パーセント)
          type: integer
          maxLength: 3
          example: 75
        achievementDifficulty:
          description: 達成難度
          type: integer
          enum: [1,2,3,4,5]
          example: 4
    personalEva:
      allOf:
        - $ref: '#/components/schemas/personalEvaId'
        - $ref: '#/components/schemas/personalEvaModel'
    commentBeforeId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    commentBeforeAimId:
      type: object
      properties:
        aimId:
          type: integer
          example: 1
    commentBeforeModel:
      type: object
      properties:
        comment:
          description: 評価前面談コメント
          type: string
          maxLength: 500
          example: 頑張ってください
        evaluatorNumber:
          description: 評価者番号
          type: integer
          maxLength: 1
          example: 1
        commentUserId:
          description: コメント入力者ID
          type: integer
          maxLength: 3
          example: 1
    commentBefore:
      allOf:
        - $ref: '#/components/schemas/commentBeforeId'
        - $ref: '#/components/schemas/commentBeforeAimId'
        - $ref: '#/components/schemas/commentBeforeModel'
    evaluationId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    evaluationAimId:
      type: object
      properties:
        aimId:
          type: integer
          example: 1
    evaluationModel:
      type: object
      properties:
        comment:
          description: 評価者コメント
          type: string
          maxLength: 500
          example: とてもいいとおもいます¥n次回も頑張ってください
        achievementRate:
          description: 達成率
          type: integer
          maxLength: 3
          example: 100
        achievementDifficulty:
          description: 達成難度
          type: integer
          enum: [1,2,3,4,5]
          example: 4
        evaluatorNumber:
          description: 評価者番号
          type: integer
          maxLength: 1
          example: 1
        evaluatorUserId:
          description: 評価者ユーザID
          type: integer
          example: 1
    evaluation:
      allOf:
        - $ref: '#/components/schemas/evaluationId'
        - $ref: '#/components/schemas/evaluationAimId'
        - $ref: '#/components/schemas/evaluationModel'
    comprehensiveCommentId:
      type: object
      properties:
        id:
          type: integer
          example: 1
    comprehensiveCommentUserId:
      type: object
      properties:
        userId:
          type: integer
          example: 1
    comprehensiveCommentPeriod:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/period'
    comprehensiveCommentModel:
      type: object
      properties:
        comprehensiveComment:
          description: 総合コメント
          type: string
          maxLength: 500
          example: とてもいい感じでした¥n次回も期待しています
        commentUserId:
          description: コメントユーザID
          type: integer
          example: 1
    comprehensiveComment:
      allOf:
        - $ref: '#/components/schemas/comprehensiveCommentId'
        - $ref: '#/components/schemas/comprehensiveCommentUserId'
        - $ref: '#/components/schemas/comprehensiveCommentPeriod'
        - $ref: '#/components/schemas/comprehensiveCommentModel'


        

  requestBodies:
    userBody:
      description: ユーザ作成リクエストボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    policyBody:
      description: 経営方針作成リクエストボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/policyModel'
    departmentGoalBody:
      description: 部署目標作成リクエストボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/departmentGoalModel'
    roleBody:
      description: 本人の役割作成リクエストボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/roleModel'

  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/defaultResponse'

tags:
  - name: period
  - name: department
  - name: job
  - name: aimoInfo
  - name: user
  - name: policy
  - name: departmentGoal
  - name: role
  - name: aim
  - name: personalEva
  - name: evaluationBefore
  - name: evaluation


